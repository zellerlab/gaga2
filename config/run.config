params {
	publish_mode = "symlink"

	// default figaro parameters
	// overlap between read1 and read2
	min_overlap = 20
	// length of left primer
	left_primer = 0
	// length of right primer
	right_primer = 0

	// only keep reads of at least length = qc_minlen
	qc_minlen = 100

	// If only primer lengths are supplied, figaro/dada2 will take care of primer removal.
	// Otherwise, if primer sequences are supplied,
	// primer + adapter removal is a two-step process:
	// 1. gentle quality trimming (< phred 3) + remove left primer on 5'-R1 and potentially on 3'-R2 (rc)
	// 2. remove right primer on 5'-R2 and potentially on 3'-R1 (rc)

	// Primer removal is highly dataset-specific, you might have to play with the settings below:
	// also refer to: https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/bbduk-guide/
	// cu=t : allow degenerate primer sequences
	// qtrim=rl trimq=3 : gentle quality trimming (< phred 3) on both sides
	// ktrim=(r|l) : clip adapters from right xor left end -- DO NOT MODIFY.
	// restrictleft|restrictright : only take into account the first / last N bases for adapter clipping
	// k=9 hdist=1: adapter/primer k-mers of length 9 have to match with at most one mismatch
	// mink=1: at the ends of reads, perfect (mismatch=0) adapter/primer k-mer matches of length 1 are allowed (similar to cutadapt)
  // -- to allow mismatches, set hdist2 to a positive, non-zero integer

	p5_primer_params = "cu=t qtrim=rl ktrim=l trimq=3 k=9 mink=1 hdist=1 restrictleft=50"
	p3_primer_params = "cu=t ktrim=r k=9 mink=1 hdist=1 restrictright=50"

	// default settings for mapseq (when served from gaga2-singularity container)
	// only edit these three, if you're using a local mapseq installation
	mapseq_bin = "mapseq"
	mapseq_db_path = projectDir  // dirname of /path/to/mapseq_folder (i.e. /path/to)
	mapseq_db_name = "" // basename of /path/to/mapseq_folder (i.e. mapseq_folder)

	// parameters for dada2 chimera removal -- potentially useful for troubleshooting
	dada2_chimera_method = "consensus" // can be "consensus" (default dada2 since 1.4) or "pool"
	dada2_chimera_min_fold_parent_over_abundance = 2
}

/* section below needs to be adjusted to local cluster */
executor {
	$slurm {
		queueSize = 30
	}
	$local {
		cpus = 1
		memory = '4 GB'
	}
}

process {
	cache = 'lenient'
	withName: figaro {
		container = "oras://ghcr.io/zellerlab/gaga2:latest"
		// conda = "/g/scb/zeller/schudoma/software/conda/figaro"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		memory = '16.GB'
		time = '4d'
		maxRetries = 3
		cpus = 8
	}
	withLabel: dada2 {
		container = "oras://ghcr.io/zellerlab/gaga2:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		memory = '16.GB'
		time = '4d'
		maxRetries = 3
		cpus = 8
	}
	withLabel: bbduk {
		container = "oras://ghcr.io/zellerlab/gaga2:latest"
        executor = "slurm"
        errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
        cpus = 4
        memory = {8.GB * task.attempt}
        time = '2h'
        maxRetries = 3
    }
	withName: fastqc {
		container = "oras://ghcr.io/zellerlab/gaga2:latest"
		executor = "slurm"
    errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 2
		memory = {4.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
	withName: mapseq_otutable {
		container = "oras://ghcr.io/zellerlab/gaga2:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3
	}
	withName: collate_mapseq_tables {
		container = "oras://ghcr.io/zellerlab/gaga2:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 1
		memory = {2.GB * task.attempt}
		time = '24h'
		maxRetries = 3
	}
	withName: mapseq {
		container = "oras://ghcr.io/zellerlab/gaga2:latest"
		executor = "slurm"
		errorStrategy = {task.attempt <= 3 ? "retry" : "ignore"}
		cpus = 8
		memory = {8.GB * task.attempt}
		time = '7d'
		maxRetries = 3
	}
}

singularity {
	enabled = true
	autoMounts = true
}
